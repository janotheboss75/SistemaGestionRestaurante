package GUI;

import DTOs.ComandaDTO;
import DTOs.NuevaComandaDTO;
import DTOs.ProductoComandaDTO;
import entidades.Cliente;
import entidades.ClienteFrecuente;
import entidades.Comanda;
import entidades.Mesa;
import entidades.ProductoComanda;
import enums.EstadoMesa;
import excepciones.NegocioException;
import interfaces.IClienteBO;
import interfaces.IComandaBO;
import interfaces.IMesaBO;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import manejadoresDeObjetoNegocio.ManejadorObjetosNegocio;
import mappers.ProductoComandaMapper;
import utils.IconCellRenderer;

/**
 *
 * @author janot
 */
public class VentanaComandaNueva extends javax.swing.JDialog {
    private Control control = new Control();
    private IMesaBO mesaBO;
    private IClienteBO clienteBO;
    private IComandaBO comandaBO;
    protected List<ProductoComandaDTO> productosComandaDTO = new ArrayList<>();
    private List<Cliente> clientes;
    private VentanaComandasPendientes ventana;
    
    /**
     * Creates new form VentanaComandaNueva
     */
    public VentanaComandaNueva(VentanaComandasPendientes ventana, boolean modal) {
        super(ventana, modal);
        mesaBO = ManejadorObjetosNegocio.crearMesaBO();
        clienteBO = ManejadorObjetosNegocio.crearClienteBO();
        comandaBO = ManejadorObjetosNegocio.crearComandaBO();
        this.ventana = ventana;
        
        initComponents();
        cargarJComboBoxMesas();
        asignarDatosListaClientes();
        cargarjListProductos();
        cargarDatosComandaAModificar();
        cargarDatosTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabelAgregarIngrediente2 = new javax.swing.JLabel();
        jLabelProductoNuevo1 = new javax.swing.JLabel();
        jLabelIconCerrar = new javax.swing.JLabel();
        jComboBoxMesas = new javax.swing.JComboBox<>();
        jLabelNombre = new javax.swing.JLabel();
        jLabelPrecio = new javax.swing.JLabel();
        jLabelProductoNuevo2 = new javax.swing.JLabel();
        jLabelAgregarIngrediente1 = new javax.swing.JLabel();
        jLabelIconAgregarProducto = new javax.swing.JLabel();
        jPanelCrear = new GUI.PanelRound();
        jLabelCrear = new javax.swing.JLabel();
        jLabelPrecio1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList<>();
        jTextFieldCliente = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableProductos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelAgregarIngrediente2.setFont(new java.awt.Font("Product Sans Infanity", 1, 18)); // NOI18N
        jLabelAgregarIngrediente2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelAgregarIngrediente2.setText("Producto");
        jPanel1.add(jLabelAgregarIngrediente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 100, -1, -1));

        jLabelProductoNuevo1.setFont(new java.awt.Font("Product Sans Infanity", 1, 48)); // NOI18N
        jLabelProductoNuevo1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelProductoNuevo1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProductoNuevo1.setText("Nueva");
        jPanel1.add(jLabelProductoNuevo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 0, 360, -1));

        jLabelIconCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cross-small.png"))); // NOI18N
        jLabelIconCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelIconCerrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelIconCerrarMouseClicked(evt);
            }
        });
        jPanel1.add(jLabelIconCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 0, 60, 50));

        jComboBoxMesas.setBackground(new java.awt.Color(255, 255, 255));
        jComboBoxMesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMesasActionPerformed(evt);
            }
        });
        jPanel1.add(jComboBoxMesas, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, 110, 30));

        jLabelNombre.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        jLabelNombre.setForeground(new java.awt.Color(0, 0, 0));
        jLabelNombre.setText("Asignar Mesa");
        jPanel1.add(jLabelNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, -1, -1));

        jLabelPrecio.setFont(new java.awt.Font("Product Sans Infanity", 0, 12)); // NOI18N
        jLabelPrecio.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPrecio.setText("*Opcional");
        jPanel1.add(jLabelPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, -1, -1));

        jLabelProductoNuevo2.setFont(new java.awt.Font("Product Sans Infanity", 1, 48)); // NOI18N
        jLabelProductoNuevo2.setForeground(new java.awt.Color(0, 0, 0));
        jLabelProductoNuevo2.setText("Comanda");
        jPanel1.add(jLabelProductoNuevo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 230, -1));

        jLabelAgregarIngrediente1.setFont(new java.awt.Font("Product Sans Infanity", 1, 18)); // NOI18N
        jLabelAgregarIngrediente1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelAgregarIngrediente1.setText("Agregar");
        jPanel1.add(jLabelAgregarIngrediente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 80, 70, -1));

        jLabelIconAgregarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/add.png"))); // NOI18N
        jLabelIconAgregarProducto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelIconAgregarProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelIconAgregarProductoMouseClicked(evt);
            }
        });
        jPanel1.add(jLabelIconAgregarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 130, -1, -1));

        jPanelCrear.setBackground(new java.awt.Color(44, 44, 44));
        jPanelCrear.setRoundBottomLeft(15);
        jPanelCrear.setRoundBottomRight(15);
        jPanelCrear.setRoundTopLeft(15);
        jPanelCrear.setRoundTopRight(15);
        jPanelCrear.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelCrear.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabelCrear.setForeground(new java.awt.Color(255, 255, 255));
        jLabelCrear.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelCrear.setText("Crear");
        jLabelCrear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabelCrear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelCrearMouseClicked(evt);
            }
        });
        jPanelCrear.add(jLabelCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 110, 30));

        jPanel1.add(jPanelCrear, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 480, 110, 30));

        jLabelPrecio1.setFont(new java.awt.Font("Product Sans Infanity", 0, 18)); // NOI18N
        jLabelPrecio1.setForeground(new java.awt.Color(0, 0, 0));
        jLabelPrecio1.setText("Asociar Cliente");
        jPanel1.add(jLabelPrecio1, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 120, -1, -1));

        jListClientes.setBackground(new java.awt.Color(255, 255, 255));
        jListClientes.setModel(new javax.swing.DefaultListModel<Cliente>());
        jListClientes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListClientesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListClientes);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, 210, 60));

        jTextFieldCliente.setBackground(new java.awt.Color(255, 255, 255));
        jTextFieldCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldClienteActionPerformed(evt);
            }
        });
        jTextFieldCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldClienteKeyTyped(evt);
            }
        });
        jPanel1.add(jTextFieldCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 142, 210, 30));

        jTableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Producto", "Cantidad", "Precio", "Importe", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableProductos.setRowHeight(30);
        jTableProductos.setRowSelectionAllowed(false);
        jTableProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTableProductos);
        if (jTableProductos.getColumnModel().getColumnCount() > 0) {
            jTableProductos.getColumnModel().getColumn(0).setResizable(false);
            jTableProductos.getColumnModel().getColumn(1).setResizable(false);
            jTableProductos.getColumnModel().getColumn(2).setResizable(false);
            jTableProductos.getColumnModel().getColumn(3).setResizable(false);
            jTableProductos.getColumnModel().getColumn(4).setResizable(false);
            jTableProductos.getColumnModel().getColumn(5).setResizable(false);
        }

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 250, 870, 220));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 870, 550));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabelIconCerrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelIconCerrarMouseClicked
        control.cerrarDialogo(this);
    }//GEN-LAST:event_jLabelIconCerrarMouseClicked

    private void jLabelIconAgregarProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelIconAgregarProductoMouseClicked
        control.mostrarPantallaAgregarProductoAComanda(this,rootPaneCheckingEnabled);
    }//GEN-LAST:event_jLabelIconAgregarProductoMouseClicked

    private void jLabelCrearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelCrearMouseClicked
        operacionComandas();
    }//GEN-LAST:event_jLabelCrearMouseClicked

    private void jTextFieldClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldClienteActionPerformed

    private void jTextFieldClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldClienteKeyTyped
        String busqueda = jTextFieldCliente.getText();  
        buscador(busqueda);
    }//GEN-LAST:event_jTextFieldClienteKeyTyped

    private void jListClientesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListClientesValueChanged
        if (jListClientes.getSelectedValue() != null) {
            jTextFieldCliente.setText(jListClientes.getSelectedValue().toString());
        }
    }//GEN-LAST:event_jListClientesValueChanged

    private void jTableProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductosMouseClicked
        funcionalidadIconTablaEliminar(evt);
    }//GEN-LAST:event_jTableProductosMouseClicked

    private void jComboBoxMesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMesasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxMesasActionPerformed

    
    
    /*UTILS*/  
    public void cargarJComboBoxMesas(){
        List<Mesa> mesasDisponibles = new ArrayList();
        try {
           mesasDisponibles =  mesaBO.consultarMesasDisponibles();
        } catch (NegocioException e) {
            JOptionPane.showMessageDialog(this, e);
        }
        
        if(mesasDisponibles.size() != 0){
            for (Mesa mesa : mesasDisponibles) {
                jComboBoxMesas.addItem(mesa);
            }
        }
    }
    
    public void cargarDatosTabla(){
        Icon iconoModificar = new ImageIcon(getClass().getResource("/imagenes/modificar.png"));
        Icon iconoEliminar = new ImageIcon(getClass().getResource("/imagenes/eliminar.png"));
        
        DefaultTableModel model = (DefaultTableModel) jTableProductos.getModel();
        model.setNumRows(0);
        for (ProductoComandaDTO productoComandaDTO : productosComandaDTO) {
            model.addRow(new Object[]{
                productoComandaDTO.getId(),
                productoComandaDTO.getProducto().getNombre(),
                productoComandaDTO.getCantidad(),
                productoComandaDTO.getPrecioActual(),
                productoComandaDTO.getImporte(),
                productoComandaDTO.getComentario(),
            });
        }
        
        jTableProductos.setModel(model);
        jTableProductos.getColumnModel().getColumn(0).setMinWidth(0);
        jTableProductos.getColumnModel().getColumn(0).setMaxWidth(0);
        jTableProductos.getColumnModel().getColumn(0).setWidth(0);
        
        jTableProductos.getColumnModel().getColumn(5).setMinWidth(40);
        jTableProductos.getColumnModel().getColumn(5).setMaxWidth(40);
        jTableProductos.getColumnModel().getColumn(5).setWidth(40);
        jTableProductos.getColumnModel().getColumn(5).setCellRenderer(new IconCellRenderer(iconoEliminar));
        
    }
    
    public void cargarjListProductos(){
        DefaultListModel<Cliente> modeloClientes = new DefaultListModel<>();
        jListClientes.setModel(modeloClientes);
       
        for (Cliente cliente : clientes) {
            modeloClientes.addElement(cliente);
        }
    }
    
    public void asignarDatosListaClientes(){
        try {
            this.clientes = clienteBO.consultarTodosLosClientes();
            //this.clientes.addFirst(new Cliente(){});
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    public void buscador(String busqueda){
        List<Cliente> clientesFiltrados = clientes.stream()
                                                                .filter(cliente -> (cliente.getNombre() + " " + cliente.getApellidoPaterno()).toLowerCase().startsWith(busqueda.toLowerCase()) || (cliente.getTelefono() +  " ").startsWith(busqueda))
                                                                .collect(Collectors.toList());
        DefaultListModel<Cliente> modeloClientes = new DefaultListModel<>();
        jListClientes.setModel(modeloClientes);
        
        for (Cliente cliente : clientesFiltrados) {
            modeloClientes.addElement(cliente);
        }
    }
    
    public void crearComanda(){
        if(jComboBoxMesas.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle una mesa a la comanda");
        }
        else{
            Mesa mesa = (Mesa) jComboBoxMesas.getSelectedItem();
            Cliente cliente = jListClientes.getSelectedValue();
            List<ProductoComandaDTO> productos = productosComandaDTO;
            double total = 0;
            for (ProductoComandaDTO producto : productos) {
                total += producto.getImporte();
            }

            NuevaComandaDTO comandaNueva = new NuevaComandaDTO(total, cliente, mesa, productosComandaDTO);

            try {
                NuevaComandaDTO comandaAgregada = comandaBO.crearComanda(comandaNueva);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
            
            JOptionPane.showMessageDialog(this, "Comanda Creada");
            control.cerrarDialogo(this);
        }
    }
    
    private void funcionalidadIconTablaEliminar(MouseEvent evt){
        int fila = jTableProductos.rowAtPoint(evt.getPoint());
        int columna = jTableProductos.columnAtPoint(evt.getPoint());
        
        if (columna == 5) { 
            Object id = jTableProductos.getModel().getValueAt(fila, 0);
            productosComandaDTO.remove(fila);
            if(id != null){
                try {
                    comandaBO.quitarProductoDecomanda((Long) id);
                } catch (NegocioException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
            }
            cargarDatosTabla();
        } 
    }
    
    private void cargarDatosComandaAModificar(){
        if(ventana != null){
            if(ventana.comanda != null){
                jComboBoxMesas.addItem(ventana.comanda.getMesa());
                jComboBoxMesas.setSelectedItem(ventana.comanda.getMesa());
                if(ventana.comanda.getCliente() != null){
                    jTextFieldCliente.setText(ventana.comanda.getCliente().toString());
                }     
                
                List<ProductoComandaDTO> productosComandaDTOCargados = new ArrayList<>();
                try {
                    productosComandaDTOCargados = comandaBO.consultarProductosDeComanda(ventana.comanda.getId());
                } catch (NegocioException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                }
                
                for (ProductoComandaDTO productoCargado : productosComandaDTOCargados) {
                        productosComandaDTO.add(productoCargado);
                }
            }
        }
        cargarDatosTabla();
    }
    
    private void operacionComandas(){
        if(ventana != null){         
            if(ventana.comanda == null){
                crearComanda();
            }
            else if(ventana.comanda != null){
                modificarComanda();
            }
        }
        else{
            crearComanda();
        }
    }
    
    public void modificarComanda(){
        if(jComboBoxMesas.getSelectedItem() == null){
            JOptionPane.showMessageDialog(this, "Tienes que asignarle una mesa a la comanda");
        }
        else{
            Mesa mesa = (Mesa) jComboBoxMesas.getSelectedItem();
            Cliente cliente = null;
            if(jListClientes.getSelectedValue() != null){
                cliente = jListClientes.getSelectedValue();
            }
            else{
                cliente = ventana.comanda.getCliente();
            }
            List<ProductoComandaDTO> productos = productosComandaDTO;
            double total = 0;
            for (ProductoComandaDTO producto : productos) {
                total += producto.getImporte();
            }
            ComandaDTO comandaDTO = new ComandaDTO(ventana.comanda.getId(), ventana.comanda.getFolio(), ventana.comanda.getFechaComanda(), ventana.comanda.getEstado(), total, cliente, mesa,productos);

            try {
                comandaBO.modificarComanda(comandaDTO);
                JOptionPane.showMessageDialog(rootPane, "Comanda Modificada con exito");
                control.cerrarDialogo(this);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e);
            }
            
            control.cerrarDialogo(this);
        }
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Mesa> jComboBoxMesas;
    private javax.swing.JLabel jLabelAgregarIngrediente1;
    private javax.swing.JLabel jLabelAgregarIngrediente2;
    public javax.swing.JLabel jLabelCrear;
    private javax.swing.JLabel jLabelIconAgregarProducto;
    private javax.swing.JLabel jLabelIconCerrar;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelPrecio;
    private javax.swing.JLabel jLabelPrecio1;
    protected javax.swing.JLabel jLabelProductoNuevo1;
    protected javax.swing.JLabel jLabelProductoNuevo2;
    private javax.swing.JList<Cliente> jListClientes;
    private javax.swing.JPanel jPanel1;
    private GUI.PanelRound jPanelCrear;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableProductos;
    private javax.swing.JTextField jTextFieldCliente;
    // End of variables declaration//GEN-END:variables
}
